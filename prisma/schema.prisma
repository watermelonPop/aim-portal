generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String
  role      Role
  createdAt DateTime   @default(now())
  advisor   Advisor?
  forms     Form[]
  professor Professor?
  settings  Settings?
  student   Student?
  user      User?
}

model User {
  userId       Int       @id @unique
  dob          DateTime
  UIN          Int?      @unique
  phone_number String
  request      Request[]
  account      Account   @relation(fields: [userId], references: [id])
}

model Student {
  userId                 Int                    @id @unique
  UIN                    Int?                   @unique
  dob                    DateTime
  phone_number           String
  accommodations         Accommodations[]
  assistive_technologies Assistive_Technology[]
  account                Account                @relation(fields: [userId], references: [id])
  advisors               Advisor[]              @relation("AdvisorToStudent")
  courses                Course[]               @relation("CourseToStudent")
}

model Professor {
  userId     Int      @id @unique
  department String?
  courses    Course[]
  account    Account  @relation(fields: [userId], references: [id])
}

model Advisor {
  userId                       Int                    @id @unique
  role                         AdvisorRoles           @default(Coordinator)
  accessible_testing_modules   Boolean                @default(false)
  accomodation_modules         Boolean                @default(false)
  assistive_technology_modules Boolean                @default(false)
  global_settings              Boolean                @default(false)
  note_taking_modules          Boolean                @default(false)
  student_case_information     Boolean                @default(false)
  Accommodations               Accommodations[]
  account                      Account                @relation(fields: [userId], references: [id])
  assistive_technologies       Assistive_Technology[]
  exams                        Exam[]
  requests                     Request[]
  students                     Student[]              @relation("AdvisorToStudent")
}

model Settings {
  userId                Int     @id @unique
  content_size          Int     @default(100)
  highlight_tiles       Boolean @default(false)
  highlight_links       Boolean @default(false)
  text_magnifier        Boolean @default(false)
  align_text            String  @default("center")
  font_size             Int     @default(14)
  line_height           Int     @default(5000)
  letter_spacing        Int     @default(0)
  mute_sounds           Boolean @default(false)
  hide_images           Boolean @default(false)
  reading_mask          Boolean @default(false)
  highlight_hover       Boolean @default(false)
  contrast              String  @default("100%")
  cursor_color          String  @default("#000000")
  cursor_border_color   String  @default("#FFFFFF")
  cursor_size           Int     @default(2)
  background_color      String  @default("#FFEDED")
  foreground_color      String  @default("#4F0000")
  text_color            String  @default("#000000")
  highlight_hover_color String  @default("#BD180F")
  saturation            String  @default("100%")
  font                  Font    @default(Mitr)
  account               Account @relation(fields: [userId], references: [id])
}

model Form {
  id            Int        @id @default(autoincrement())
  name          String
  type          FormType
  status        FormStatus @default(PENDING)
  submittedDate DateTime?
  dueDate       DateTime?
  createdAt     DateTime   @default(now())
  userId        Int
  formUrl       String?
  user          Account    @relation(fields: [userId], references: [id])
}

model Important_Dates {
  id   Int      @id @default(autoincrement())
  type String
  name String
  date DateTime
}

model Testing_Room {
  id        Int     @id @default(autoincrement())
  location  String  @default("Student Services Building")
  available Boolean @default(true)
}

model Assistive_Technology {
  id        Int     @id @default(autoincrement())
  available Boolean @default(false)
  studentId Int
  type      String
  advisorId Int
  advisor   Advisor @relation(fields: [advisorId], references: [userId])
  student   Student @relation(fields: [studentId], references: [userId])
}

model Accommodations {
  id             Int      @id @default(autoincrement())
  type           String?
  status         String
  date_requested DateTime @default(now())
  advisorId      Int
  notes          String
  studentId      Int
  advisor        Advisor  @relation(fields: [advisorId], references: [userId])
  student        Student  @relation(fields: [studentId], references: [userId])
  courses        Course[] @relation("AccommodationsToCourse")
}

model Request {
  id                    Int     @id @default(autoincrement())
  advisorId             Int
  notes                 String?
  documentation         Boolean
  non_registered_userId Int
  advisor               Advisor @relation(fields: [advisorId], references: [userId])
  user                  User    @relation(fields: [non_registered_userId], references: [userId])
  status                RequestStatus   @default(PENDING)
}

model Course {
  id             Int              @id @default(autoincrement())
  name           String
  department     String
  professorId    Int
  professor      Professor        @relation(fields: [professorId], references: [userId])
  exams          Exam[]
  accommodations Accommodations[] @relation("AccommodationsToCourse")
  students       Student[]        @relation("CourseToStudent")
}

model Exam {
  id        Int       @id @default(autoincrement())
  courseId  Int
  date      DateTime?
  location  String
  advisorId Int
  advisor   Advisor   @relation(fields: [advisorId], references: [userId])
  course    Course    @relation(fields: [courseId], references: [id])
}

enum FormStatus {
  OVERDUE
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

enum FormType {
  REGISTRATION_ELIGIBILITY
  ACADEMIC_CLASSROOM
  CAMPUS_LIVING_MOBILITY
  APPEALS_TEMP_WORKPLACE
}

enum AdvisorRoles {
  Admin
  Coordinator
  Testing_Staff
  Tech_Staff
}

enum Role {
  STUDENT
  PROFESSOR
  ADVISOR
  USER
}

enum RequesterRole {
  STUDENT
  ADVISOR
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}

enum Font {
  Mitr
  Lexend
  Roboto
  Montserrat
  Lato
  Nunito
}
